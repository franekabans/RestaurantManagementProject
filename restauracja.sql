create schema restauracja;
\c restauracja
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------PODSTAWOWE TABELE-------------------------------------------------------------------------------------------------------------------------------------
create table kucharz ( id_kucharz int, imie_kucharz varchar(30), pensja int ) ;
create table posilek (id_posilek int, nazwa_dania varchar(30), cena_dania DECIMAL) ;
create table skladnik (nazwa_produktu varchar(30) , opis varchar(60) ) ;
create table zamowienie ( id_zamowienie int, data_czas TIME , suma_naleznosc DECIMAL) ;
create table klient( id_klient int, ilosc_zamowien int, adres text, telefon varchar(15),imie_klient varchar(15) , nazwisko_klient varchar(30) , sposob_platnosci varchar(30) ) ;
create table kelner (id_kelner int ,imie_kelner varchar(15)) ;
create table dostawca (id_dostawca int , imie_dostawca varchar(15)) ;
-----------------------------------------	-----------------------------------------
create table premium (id_klient int, znizka DECIMAL) ;
----------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
alter table kucharz add primary key (id_kucharz) ;
alter table posilek add primary key (id_posilek) ;
alter table skladnik add primary key (nazwa_produktu) ;
alter table zamowienie add primary key (id_zamowienie) ;
alter table klient add primary key (id_klient) ;
alter table kelner add primary key (id_kelner) ;
alter table dostawca add primary key (id_dostawca) ;
alter table premium add primary key (id_klient);

---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------



alter table premium add foreign key (id_klient) references klient(id_klient);


----------------------------------------------TABELE relacyjne----------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------

-----------------------------------------
--zlozony_z = posilek_skladnik 
-----------------------------------------
--create table posilek_skladnik (id_posi int, nazwa_prod varchar(30));
--alter table posilek_skladnik add primary key ( id_posi, nazwa_prod) ;
---alter table posilek_skladnik add foreign key (id_posi) references posilek (id_posilek);
--alter table posilek_skladnik add foreign key (nazwa_prod) references skladnik (nazwa_produktu);




-----------------------------------------
--zawiera = zamowienie_posilki
-----------------------------------------
create table zamowienie_posilki(id_zamow int, id_posi int,ilosc int);
alter table zamowienie_posilki add primary key (id_zamow, id_posi);
alter table zamowienie_posilki add foreign key (id_zamow) references zamowienie(id_zamowienie);
alter table zamowienie_posilki add foreign key (id_posi) references posilek (id_posilek);




-----------------------------------------
--zamawia = klient_zamowienie
-----------------------------------------
create table klient_zamowienie (id_kli int, id_zamow int);
alter table klient_zamowienie add primary key (id_kli, id_zamow);
alter table klient_zamowienie add foreign key (id_kli) references klient (id_klient);
alter table klient_zamowienie add foreign key (id_zamow) references zamowienie (id_zamowienie);




-----------------------------------------
--dostawa = dostawca_klient
-----------------------------------------
create table dostawa (id_dostaw int, id_kli int,czas_realizacji TIME );
alter table dostawa add primary key (id_dostaw, id_kli);
alter table dostawa add foreign key (id_dostaw) references dostawca (id_dostawca);
alter table dostawa add foreign key (id_kli) references klient (id_klient);

---------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------
---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------
---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------
---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------
---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------
---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------WYPELNIANIE---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------

---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------
---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------

---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------

---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------
---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------
---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------

---------------------------------------------------------------------------------------------------------------------------
-----------------------------------------
---------------------------------------------------------------------------------------------------------------------------
----------------------------------------- 


insert into kucharz ( id_kucharz, imie_kucharz, pensja) values 
(1,'Waldemar',3000),
(2,'Stefan',2500),
(3,'Dominik',3500),
(4,'Ludwik',4000);



insert into posilek (id_posilek , nazwa_dania , cena_dania ) values 
(1,'spaghetti bolognesse', 15.00),
(2,'pomidorowa z ryżem', 7.00),
(3,'kotlet z grilla ',30.00),
(4,'sernik',7.00),
(5,'kiszka',12.00);


insert into skladnik (nazwa_produktu , opis  ) values 
('pomidor','prosto z nepalu świeże pomidorki'),
('ryż','dostawca : biedronka cena za kilogram 5 zł'),
('makaron','włoski makaron najwyższej jakości');




insert into zamowienie ( id_zamowienie , data_czas , suma_naleznosc ) values 
(11,'2019-01-02 10:23:54',120.00),
(1,'2018-12-031 12:43:14',6.00),
(122,'2019-01-03 11:12:12',12.00);



insert into klient ( id_klient , ilosc_zamowien , adres , telefon ,imie_klient  , nazwisko_klient  , sposob_platnosci) values
(44,3,'bleblebe','501822345','hehehaw','Nowjejejak','Paypal'),
(1,1,'Krakow ul.Karmelicka 16/5','501822345','Stanislaw','Nowak','Paypal'),
(33,1,'Krakow ul.Piastowska 55/5','504322345','Adam','Krasiciki','Paypal');




insert into kelner (id_kelner  ,imie_kelner ) values 
(1,'Marek'),
(2,'Jerzy'),
(3,'Klaudia'),
(5,'Angela'),
(7,'Marcelina');


insert into dostawca (id_dostawca , imie_dostawca ) values 
(1,'Andrzej'),
(2,'Michał'),
(3,'Patrycja');

-------------------------
--------
------
--insert into posilek_skladnik (id_posi, nazwa_prod) values
--(2,'pomidor'),(2,'ryż'),(1,'makaron');
--insert into klient_zamowienie (id_kli, id_zamow ) values
--(1,121),(33,12);---
------------------------------------------------------------


insert into dostawa (id_dostaw , id_kli ,czas_realizacji ) values
(3,1,'2019-01-02 11:24:44'),(2,33,'2019-01-03 13:12:12');



insert into zamowienie_posilki(id_zamow , id_posi, ilosc) values
(122,4,3),(11,5,4),(1,5,1),(11,4,2);


---------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------
------WIDOKI WRAZ Z AGREGATAMI--------
create view zarobek as select sum(*) from (select suma_naleznosc from zamowienie);
create view ilosc_dostawcow as select count(*) as ilosc_dostawcow from dostawca;
create view najmniejaaarabia as SELECT imie_kucharz, pensja FROM kucharz WHERE pensja = (SELECT MIN (pensja) FROM kucharz );

--------------------------------------------------------------------------------------

create view calkiem_przyjemny_zarobek as select * from zamowienie where suma_naleznosc > 50.00;
--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------

--------------------------TRIGGERY--------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION jeden() RETURNS TRIGGER AS $example_table$
   BEGIN
      INSERT INTO dostawa(id_dostaw, id_kli,czas_realizacji) VALUES (1,new.id_klient,current_timestamp);
      RETURN NEW;
   END;
$example_table$ LANGUAGE plpgsql;


CREATE TRIGGER triggerjeden AFTER INSERT ON klient
FOR EACH ROW EXECUTE PROCEDURE jeden();

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fun1 (ID integer) 
RETURNS DECIMAL AS
$$          
  DECLARE 
  id ALIAS FOR $1 ;       
  BEGIN
    return (select cena_dania from posilek where id_posilek = id);
  END;                                                              
$$                   
LANGUAGE plpgsql; 


CREATE OR REPLACE FUNCTION psikus() RETURNS TRIGGER AS $examplee_table$
	
   BEGIN
 		
      UPDATE zamowienie SET suma_naleznosc = suma_naleznosc + new.ilosc * fun1(new.id_posi) where zamowienie.id_zamowienie = new.id_zamow;
      RETURN NEW;
      
   END;
$examplee_table$ LANGUAGE plpgsql;


CREATE TRIGGER triggerpsikus AFTER INSERT ON zamowienie_posilki
  FOR EACH ROW EXECUTE PROCEDURE psikus();



----------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION psikusodwrotny() RETURNS TRIGGER AS $exampleee_table$
	
   BEGIN
 		
      UPDATE zamowienie SET suma_naleznosc = 00.00 where zamowienie.id_zamowienie = old.id_zamow;
      RETURN NEW;
      
   END;
$exampleee_table$ LANGUAGE plpgsql;


CREATE TRIGGER triggerusun AFTER DELETE ON zamowienie_posilki
  FOR EACH ROW EXECUTE PROCEDURE psikusodwrotny();
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------

CREATE OR REPLACE FUNCTION usun() RETURNS TRIGGER AS $example_table$
   BEGIN
      DELETE from dostawa where id_dostaw = old.id_dostawca;
      RETURN NEW;
   END;
$example_table$ LANGUAGE plpgsql;


CREATE TRIGGER trigerusun BEFORE DELETE ON dostawca
FOR EACH ROW EXECUTE PROCEDURE usun();


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------

